df.melted <- melt(Diff, id = "index")
Flux=ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
print(Flux)
Diff=as.data.frame(cbind(Stype_profile$index[2:Nlayers],Diff))
df.melted <- melt(Diff, id = "index")
Flux=ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
View(Diff)
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
Diff=as.data.frame(cbind(2:Nlayers),Diff))
Diff=as.data.frame(cbind(2:Nlayers),Diff)
colnames(Diff)[1] = "index"
df.melted <- melt(Diff, id = "index")
Flux=ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
print(Flux)
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
Diff=as.data.frame(cbind(2:Nlayers),Diff)
colnames(Diff)[1] = "index"
df.melted <- melt(Diff, id = "index")
ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
View(df.melted)
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
Diff=as.data.frame(cbind(2:Nlayers),Diff)
colnames(Diff)[1] = "index"
df.melted <- melt(Diff, id = "index")
View(df.melted)
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
Diff=as.data.frame(cbind(2:Nlayers),Diff)
View(Diff)
##########################################################################
# One Stype_profile
Stype_profile_file=paste(datastamp,"___Stype_profile.txt",sep="")
Stype_profile=as.data.frame(read.table(Stype_profile_file,sep='\t',header=F))
Nlayers=dim(Stype_profile)[1]
Stype_profile=cbind(c(1:Nlayers),Stype_profile[,seq(1,1000,by=100)])
colnames(Stype_profile)[1] = "index"
df.melted <- melt(Stype_profile, id = "index")
png("S_profile2.png",width=800, height=500,res=200)
S_profile_plot=ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
print(S_profile_plot)
dev.off()
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
Diff=as.data.frame(cbind(2:Nlayers),Diff)
colnames(Diff)[1] = "index"
df.melted <- melt(Diff, id = "index")
ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
View(Diff)
##########################################################################
# One Stype_profile
Stype_profile_file=paste(datastamp,"___Stype_profile.txt",sep="")
Stype_profile=as.data.frame(read.table(Stype_profile_file,sep='\t',header=F))
Nlayers=dim(Stype_profile)[1]
Stype_profile=cbind(c(1:Nlayers),Stype_profile[,seq(1,1000,by=100)])
colnames(Stype_profile)[1] = "index"
df.melted <- melt(Stype_profile, id = "index")
png("S_profile2.png",width=800, height=500,res=200)
S_profile_plot=ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
print(S_profile_plot)
dev.off()
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
View(Diff)
Diff=as.data.frame(cbind(2:Nlayers),Diff)
View(Diff)
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
Diff=as.data.frame(cbind(c(2:Nlayers),Diff))
View(Diff)
colnames(Diff)[1] = "index"
View(Diff)
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
Diff=as.data.frame(cbind(c(1:Nlayers-1),Diff))
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
Diff=as.data.frame(cbind(c(1:c(Nlayers-1)),Diff))
colnames(Diff)[1] = "index"
df.melted <- melt(Diff, id = "index")
ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
#########################################################################
### Clear plots, console, workspace
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clear console
cat("\014")
# Clean workspace
rm(list=ls())
### Set working directory
pathFiles='/Users/pichugina/Work/Diffusion_Absorption_model/Constant_cellulose_profile/Cluster_D0.1/'
setwd(pathFiles)
library(tidyverse)
library(reshape2)
##########################################################################
# read file list
ListFiles=list.files(path = pathFiles,'*ParametersFile.txt')
N=length(ListFiles)
dataStamps=vector("list", N)
for (i in c(1:N)) dataStamps[i]=unlist(strsplit(ListFiles[i], '__'))[1]
datastamp=dataStamps[1]
##########################################################################
# One Stype_profile
Stype_profile_file=paste(datastamp,"___Stype_profile.txt",sep="")
Stype_profile=as.data.frame(read.table(Stype_profile_file,sep='\t',header=F))
Nlayers=dim(Stype_profile)[1]
Stype_profile=cbind(c(1:Nlayers),Stype_profile[,seq(1,1000,by=100)])
colnames(Stype_profile)[1] = "index"
df.melted <- melt(Stype_profile, id = "index")
png("S_profile2.png",width=800, height=500,res=200)
S_profile_plot=ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
print(S_profile_plot)
dev.off()
#mumeric Diff
Diff=Stype_profile[c(2:Nlayers),2:11]-Stype_profile[c(1:c(Nlayers-1)),2:11]
Diff=as.data.frame(cbind(c(1:c(Nlayers-1)),Diff))
colnames(Diff)[1] = "index"
df.melted <- melt(Diff, id = "index")
png("Flux.png",width=800, height=500,res=200)
Flux=ggplot(data = df.melted, aes(x = index, y = value, color = variable)) +
geom_line(show.legend=F)+ggtitle("Stype_profile D=0.1 P=0.2500") + xlab("Layers") + ylab("Stype concentration")+theme_bw()+theme(legend.position="none")
print(Flux)
dev.off()
# #########################################################################
# Stotal
STotal= as.data.frame(read.csv(paste(datastamp,"__STotal.txt",sep="")))
STotal=cbind(c(1:dim(STotal)[1]),STotal)
# #########################################################################
# Stotal
STotal= as.data.frame(read.csv(paste(datastamp,"___STotal.txt",sep="")))
STotal=cbind(c(1:dim(STotal)[1]),STotal)
colnames(STotal)=c("index","value")
# exponential model
fit<- lm(log(STotal$value)~ STotal$index)
model.fit<-data.frame(x=STotal$index,y=exp(fit$coefficients[1]+STotal$index*fit$coefficients[2]))
SdErrResidualS=sqrt(sum((STotal$value-model.fit$y)^2)/(length(STotal$value)-2))
ResToMeanS=SdErrResidualS/mean(STotal$value)
model.fit<-data.frame(x=STotal$index,y=exp(fit$coefficients[1]+STotal$index*fit$coefficients[2]))
ggplot(data = STotal, aes(x = index, y = value)) +
geom_line()+geom_line(data = model.fit, aes(x, y, color = "Exp Model"), size = 1, linetype = 2)+
ggtitle("STotal Vs Time") + xlab("Time") + ylab("delta Total")+theme_bw()
# A_type=cbind(c(1:dim(A_type)[1]),A_type)
# colnames(A_type)[1] = "index"
# Amelted <- melt(A_type, id = "index")
# ggplot(data = Amelted, aes(x =index,y =value))+
#   geom_line()+facet_grid(variable~.,scales="free_y")+
#   ggtitle("A-type channels") + xlab("Time") + ylab("A_type")+theme_bw()
#
# ##########################################################################
# A-total approximation
# function needed for visualization purposes
Function_to_fit = function(params, x) {params[1]*(1 - exp(-params[2] * x ))}
Start_a=max(A_type$total)
Start_b=1
x=A_type$index
y=A_type$total
# fitting code
fitmodel <- nls(y~a*(1 - exp(-b * x)), start=list(a=Start_a,b=Start_b))
params=coef(fitmodel)
SdErrResidualA=summary(fitmodel)$sigma
ResToMeanA=SdErrResidualA/mean(y)
# visualization code
# get the coefficients using the coef function
data_fit<-data.frame(x=A_type$index,y=Function_to_fit (params,x))
ggplot(data = A_type,aes(x =index,y =total))+
geom_line()+geom_line(data = data_fit, aes(x, y, color = "Exp Model"))+ggtitle("A-type total") + xlab("Time") + ylab("A_type")+theme_bw()
y2 <- Function_to_fit (params,x)
plot(y2,type="l")
points(y)
# #########################################################################
# A-type
A_type= as.data.frame(read.csv(paste(datastamp,"__Atype_profile.txt",sep=""),sep="\t",header=F))
colnames(A_type)=c("total","grownth","transition")
A_type=cbind(c(1:dim(A_type)[1]),A_type)
colnames(A_type)[1] = "index"
Amelted <- melt(A_type, id = "index")
ggplot(data = Amelted, aes(x =index,y =value))+
geom_line()+facet_grid(variable~.,scales="free_y")+
ggtitle("A-type channels") + xlab("Time") + ylab("A_type")+theme_bw()
# #########################################################################
# A-type
A_type= as.data.frame(read.csv(paste(datastamp,"___Atype_profile.txt",sep=""),sep="\t",header=F))
colnames(A_type)=c("total","grownth","transition")
A_type=cbind(c(1:dim(A_type)[1]),A_type)
colnames(A_type)[1] = "index"
Amelted <- melt(A_type, id = "index")
ggplot(data = Amelted, aes(x =index,y =value))+
geom_line()+facet_grid(variable~.,scales="free_y")+
ggtitle("A-type channels") + xlab("Time") + ylab("A_type")+theme_bw()
# #########################################################################
# A-type
A_type= as.data.frame(read.csv(paste(datastamp,"___Atype_profile.txt",sep=""),sep="\t",header=F))
colnames(A_type)=c("total","grownth","transition")
A_type=cbind(c(1:dim(A_type)[1]),A_type)
colnames(A_type)[1] = "index"
Amelted <- melt(A_type, id = "index")
ggplot(data =A_type,aes(x =index,y=A_type[,2]))+
geom_line()+facet_grid(variable~.,scales="free_y")+
ggtitle("A-type channels") + xlab("Time") + ylab("A_type")+theme_bw()
A_type=cbind(c(1:dim(A_type)[1]),A_type)
colnames(A_type)[1] = "index"
Amelted <- melt(A_type, id = "index")
ggplot(data =A_type,aes(x =index,y=A_type[,2]))+
geom_line()+
ggtitle("A-type channels") + xlab("Time") + ylab("A_type")+theme_bw()
ggplot(data = STotal, aes(x = index, y = log(value))) +
geom_line()+geom_line(data = model.fit, aes(x, y, color = "Exp Model"), size = 1, linetype = 2)+
ggtitle("STotal Vs Time") + xlab("Time") + ylab("delta Total")+theme_bw()
ggplot(data = STotal, aes(x = index, y = log(value))) +geom_line()+, size = 1, linetype = 2)+
ggtitle("STotal Vs Time") + xlab("Time") + ylab("delta Total")+theme_bw()
ggplot(data = STotal, aes(x = index, y = log(value))) +geom_line()+
ggtitle("STotal Vs Time") + xlab("Time") + ylab("delta Total")+theme_bw()
# #########################################################################
# A-type
A_type= as.data.frame(read.csv(paste(datastamp,"___Atype_profile.txt",sep=""),sep="\t",header=F))
colnames(A_type)=c("total","grownth","transition")
A_type=cbind(c(1:dim(A_type)[1]),A_type)
colnames(A_type)[1] = "index"
Amelted <- melt(A_type, id = "index")
ggplot(data =A_type,aes(x =index,y=A_type[,2]))+
geom_line()+
ggtitle("A-type channels") + xlab("Time") + ylab("A_type")+theme_bw()
# #########################################################################
# A-type
A_type= as.data.frame(read.csv(paste(datastamp,"___Atype_profile.txt",sep=""),sep="\t",header=F))
colnames(A_type)=c("total","grownth","transition")
A_type=cbind(c(1:dim(A_type)[1]),A_type)
colnames(A_type)[1] = "index"
Amelted <- melt(A_type, id = "index")
ggplot(data =A_type,aes(x =index,y=log(A_type[,2])))+
geom_line()+
ggtitle("A-type channels") + xlab("Time") + ylab("A_type")+theme_bw()
pathFiles='/Users/pichugina/Work/Diffusion_Absorption_model/Constant_cellulose_profile/Cluster_D0.1'
setwd(pathFiles)
library(reshape2)
library(tidyverse)
library(dplyr)
##########################################################################
## save_value
# 1 -save to file
# 0 -do not save to file
save_value=1
ListFiles=list.files(path = pathFiles,'*ParametersFile.txt')
Nfiles=length(ListFiles)
DataStamps=vector("list", Nfiles)
for (i in c(1:Nfiles)) DataStamps[i]=unlist(strsplit(ListFiles[i], '__'))[1]
##########################################################################
# read param to the vector
# WA WS Xlength D P dt  Nlayers Nfreq NtimeSteps
P=vector(mode="numeric", length=Nfiles);D=vector(mode="numeric", length=Nfiles);dt=vector(mode="numeric", length=Nfiles);Nfreq=vector(mode="numeric", length=Nfiles)
for (i in c(1:Nfiles)){
ParametersData=read.table(ListFiles[i],header = F,sep='\t')
ParametersData[,1]=as.character(ParametersData[,1])
ParametersData[,2]=as.numeric(ParametersData[,2])
P[i]=(subset(ParametersData[,2],ParametersData[,1]=="P"))
D[i]=(subset(ParametersData[,2],ParametersData[,1]=="D0"))
dt[i]=(subset(ParametersData[,2],ParametersData[,1]=="dt"))
Nfreq[i]=(subset(ParametersData[,2],ParametersData[,1]=="Nfreq"))
}
##########################################################################
# cut transition regime to improve the fit
Ncut=1 #0*ceiling(3600/(dt[1]*Nfreq[1]))
##########################################################################
##########################################################################
##########################################################################
##########################################################################
# STotal
temp = list.files(path=pathFiles,"*__STotal.txt")
myfiles=lapply(temp, read.delim,header = FALSE)
STotal=do.call(cbind,myfiles)
Ndim=nrow(STotal)
STotal=cbind(c(1:Ndim),STotal)
colnames(STotal)[1] = "index"
STotal$index=STotal$index*dt[1]*Nfreq[1]
make_column_name<-function(var1,var2){
paste("P=",toString(var1),'\t',"D=",toString(var2),sep="")
}
ColumsNames=mapply(make_column_name,P,D)
Ncol=ncol(STotal)
colnames(STotal)[2:Ncol]=ColumsNames
# cut 1 hour to improve fit
STotal=STotal[Ncut:Ndim,]
df.melted <- melt(STotal, id = "index")
S=ggplot(data = df.melted, aes(x = index,y = log(value), color = variable)) +
geom_line()+ggtitle("log(Stota) Vs Time") + xlab("Time s") + ylab("log(STotal)")+theme_bw()+
theme(legend.position="bottom")
print(S)
if (save_value==1){ png("S_profile.png",width=1000,height=800,res=200); print(S);dev.off()}
FitSCoeff=data.frame(matrix(ncol=6, nrow = Nfiles))
colnames(FitSCoeff)[1]="P";colnames(FitSCoeff)[2]="D";colnames(FitSCoeff)[3]="Intersect";colnames(FitSCoeff)[4]="Slope";colnames(FitSCoeff)[5]="SdErrResidualS";colnames(FitSCoeff)[6]="R2"
XX=STotal$index
for(i in 1:Nfiles){
YY=log(STotal[,i+1])
fit<- lm(YY~XX)
FitSCoeff$P[i]=P[i]
FitSCoeff$D[i]=D[i]
FitSCoeff$Intersect[i]=fit$coefficients[1]
FitSCoeff$Slope[i]=fit$coefficients[2]
model.fit<-data.frame(x=XX,y=exp(fit$coefficients[1]+XX*fit$coefficients[2]))
# check plot
#ggplot(data =STotal, aes(x = index, y = STotal[,i+1])) +geom_line()+geom_line(data = model.fit, aes(x, y, color = "Exp Model"), size = 1, linetype = 2)+ggtitle("STotal Vs Time") + xlab("Time") + ylab("delta Total")+theme_bw()
FitSCoeff$SdErrResidualS[i]=sqrt(sum((STotal[,i+1]-model.fit$y)^2)/(length(XX)-2))
FitSCoeff$R2[i]=summary(fit)$r.squared
}
FitSCoeff=arrange(FitSCoeff,FitSCoeff$D)
###### plot heat map
#png("S_slope.png",width=900, height=700,res=200)
Scoeff=ggplot(FitSCoeff, aes(D, log(P))) +
geom_raster(aes(fill = FitSCoeff$Slope))+
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF","#FF0000FF"))+
labs(x="D mkm^2/s",title="S-type slope ")
###### plot heat map
png("S_slope.png",width=900, height=700,res=200)
Scoeff=ggplot(FitSCoeff, aes(D, log(P))) +
geom_raster(aes(fill = FitSCoeff$Slope))+
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF","#FF0000FF"))+
labs(x="D mkm^2/s",title="S-type slope ")
print(Scoeff)
dev.off()
png("S_R2.png",width=900, height=700,res=200)
SMistake=ggplot(FitSCoeff, aes(D, log(P))) +
geom_raster(aes(fill = FitSCoeff$R2))+
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF"))+
labs(x="D mkm^2/s",title="S-type ResToMean")
print(SMistake)
dev.off()
pathFiles='/Users/pichugina/Work/Diffusion_Absorption_model/Constant_cellulose_profile/Cluster_D0.1'
setwd(pathFiles)
library(reshape2)
library(tidyverse)
library(dplyr)
source("/Users/pichugina/Work/Diffusion_Absorption_model/ExpApproximation.R")
##########################################################################
## save_value
# 1 -save to file
# 0 -do not save to file
save_value=1
ListFiles=list.files(path = pathFiles,'*ParametersFile.txt')
Nfiles=length(ListFiles)
DataStamps=vector("list", Nfiles)
for (i in c(1:Nfiles)) DataStamps[i]=unlist(strsplit(ListFiles[i], '__'))[1]
##########################################################################
# read param to the vector
# WA WS Xlength D P dt  Nlayers Nfreq NtimeSteps
P=vector(mode="numeric", length=Nfiles);D=vector(mode="numeric", length=Nfiles);dt=vector(mode="numeric", length=Nfiles);Nfreq=vector(mode="numeric", length=Nfiles)
for (i in c(1:Nfiles)){
ParametersData=read.table(ListFiles[i],header = F,sep='\t')
ParametersData[,1]=as.character(ParametersData[,1])
ParametersData[,2]=as.numeric(ParametersData[,2])
#print(ListFiles[i])
#print(i)
#print(ParametersData)
print((subset(ParametersData[,2],ParametersData[,1]=="Nfreq")))
P[i]=(subset(ParametersData[,2],ParametersData[,1]=="P"))
D[i]=(subset(ParametersData[,2],ParametersData[,1]=="D"))
dt[i]=(subset(ParametersData[,2],ParametersData[,1]=="dt"))
Nfreq[i]=(subset(ParametersData[,2],ParametersData[,1]=="Nfreq"))
}
make_column_name<-function(var1,var2){paste("P=",toString(var1),'\t',"D=",toString(var2),sep="")}
ColumsNames=mapply(make_column_name,P,D)
# subset P=0.0625
PP=as.data.frame(cbind(c(1:Nfiles),P,D),colnames=c("nfile","P","D"))
PP=subset(PP,PP$P==0.0625)
PP=arrange(PP,PP$D)
Nselected=PP$V1+1 # shift because of index
##########################################################################
# cut transition regime to improve the fit
Ncut=1 #ceiling(3600*7/(dt[1]*Nfreq[1]))
##########################################################################
##########################################################################
# ATotal
temp = list.files(path=pathFiles,"*__Atype_profile.txt")
ATotal<- do.call(cbind,lapply(temp,function(fn)read.table(fn,header=FALSE, sep="\t")[,1]))
ATotal=as.data.frame(ATotal)
Ndim=nrow(ATotal)
Ncol=ncol(ATotal)
ATotal=cbind(c(1:Ndim),ATotal)
colnames(ATotal)[1] = "index"
ATotal$index=ATotal$index*dt[1]*Nfreq[1]
colnames(ATotal)[2:c(Ncol+1)]=ColumsNames
ATotal=ATotal[Ncut:10,]
AplotTotal=ggplot(data =melt(ATotal, id = "index"),aes(x = index, y = log(value), color = variable)) +geom_line()+ggtitle("log(Atotal) Vs Time") + xlab("Time s") + ylab("log(Atotal")+theme_bw()+
theme(legend.position="bottom")
print(AplotTotal)
Atotal_selected=ATotal[,c(1,Nselected)]
APlot_total_selected=ggplot(data = melt(Atotal_selected, id = "index") ,aes(x = index, y = log(value), color = variable)) +geom_line()+ggtitle("log(Atotal) Vs Time") + xlab("Time s") + ylab("log(Atotal")+theme_bw()+
theme(legend.position="bottom")
print(APlot_total_selected)
pathFiles='/Users/pichugina/Work/Diffusion_Absorption_model/Constant_cellulose_profile/Cluster_D0.1'
setwd(pathFiles)
library(reshape2)
library(tidyverse)
library(dplyr)
source("/Users/pichugina/Work/Diffusion_Absorption_model/ExpApproximation.R")
##########################################################################
## save_value
# 1 -save to file
# 0 -do not save to file
save_value=1
ListFiles=list.files(path = pathFiles,'*ParametersFile.txt')
Nfiles=length(ListFiles)
DataStamps=vector("list", Nfiles)
for (i in c(1:Nfiles)) DataStamps[i]=unlist(strsplit(ListFiles[i], '__'))[1]
##########################################################################
# read param to the vector
# WA WS Xlength D P dt  Nlayers Nfreq NtimeSteps
P=vector(mode="numeric", length=Nfiles);D=vector(mode="numeric", length=Nfiles);dt=vector(mode="numeric", length=Nfiles);Nfreq=vector(mode="numeric", length=Nfiles)
for (i in c(1:Nfiles)){
ParametersData=read.table(ListFiles[i],header = F,sep='\t')
ParametersData[,1]=as.character(ParametersData[,1])
ParametersData[,2]=as.numeric(ParametersData[,2])
#print(ListFiles[i])
#print(i)
#print(ParametersData)
print((subset(ParametersData[,2],ParametersData[,1]=="Nfreq")))
P[i]=(subset(ParametersData[,2],ParametersData[,1]=="P"))
D[i]=(subset(ParametersData[,2],ParametersData[,1]=="D"))
dt[i]=(subset(ParametersData[,2],ParametersData[,1]=="dt"))
Nfreq[i]=(subset(ParametersData[,2],ParametersData[,1]=="Nfreq"))
}
##########################################################################
# read param to the vector
# WA WS Xlength D P dt  Nlayers Nfreq NtimeSteps
P=vector(mode="numeric", length=Nfiles);D=vector(mode="numeric", length=Nfiles);dt=vector(mode="numeric", length=Nfiles);Nfreq=vector(mode="numeric", length=Nfiles)
for (i in c(1:Nfiles)){
ParametersData=read.table(ListFiles[i],header = F,sep='\t')
ParametersData[,1]=as.character(ParametersData[,1])
ParametersData[,2]=as.numeric(ParametersData[,2])
#print(ListFiles[i])
#print(i)
#print(ParametersData)
print((subset(ParametersData[,2],ParametersData[,1]=="Nfreq")))
P[i]=(subset(ParametersData[,2],ParametersData[,1]=="P"))
D[i]=(subset(ParametersData[,2],ParametersData[,1]=="D0"))
dt[i]=(subset(ParametersData[,2],ParametersData[,1]=="dt"))
Nfreq[i]=(subset(ParametersData[,2],ParametersData[,1]=="Nfreq"))
}
make_column_name<-function(var1,var2){paste("P=",toString(var1),'\t',"D=",toString(var2),sep="")}
ColumsNames=mapply(make_column_name,P,D)
# subset P=0.0625
PP=as.data.frame(cbind(c(1:Nfiles),P,D),colnames=c("nfile","P","D"))
PP=subset(PP,PP$P==0.0625)
PP=arrange(PP,PP$D)
Nselected=PP$V1+1 # shift because of index
##########################################################################
# cut transition regime to improve the fit
Ncut=1 #ceiling(3600*7/(dt[1]*Nfreq[1]))
##########################################################################
##########################################################################
# ATotal
temp = list.files(path=pathFiles,"*__Atype_profile.txt")
ATotal<- do.call(cbind,lapply(temp,function(fn)read.table(fn,header=FALSE, sep="\t")[,1]))
ATotal=as.data.frame(ATotal)
Ndim=nrow(ATotal)
Ncol=ncol(ATotal)
ATotal=cbind(c(1:Ndim),ATotal)
colnames(ATotal)[1] = "index"
ATotal$index=ATotal$index*dt[1]*Nfreq[1]
colnames(ATotal)[2:c(Ncol+1)]=ColumsNames
ATotal=ATotal[Ncut:10,]
AplotTotal=ggplot(data =melt(ATotal, id = "index"),aes(x = index, y = log(value), color = variable)) +geom_line()+ggtitle("log(Atotal) Vs Time") + xlab("Time s") + ylab("log(Atotal")+theme_bw()+
theme(legend.position="bottom")
print(AplotTotal)
png("ATotal.png",width=900, height=700,res=200)
AplotTotal=ggplot(data =melt(ATotal, id = "index"),aes(x = index, y = log(value), color = variable)) +geom_line()+ggtitle("log(Atotal) Vs Time") + xlab("Time s") + ylab("log(Atotal")+theme_bw()+
theme(legend.position="bottom")
print(AplotTotal)
div.off()
png("ATotal.png",width=900, height=700,res=200)
AplotTotal=ggplot(data =melt(ATotal, id = "index"),aes(x = index, y = log(value), color = variable)) +geom_line()+ggtitle("log(Atotal) Vs Time") + xlab("Time s") + ylab("log(Atotal")+theme_bw()+
theme(legend.position="bottom")
print(AplotTotal)
dev.off()
FitACoeff=exp_approximation(ATotal,P,D)
FitACoeff$Slope=(FitACoeff$Slope-3.7e-4)/3.7e-4
FitACoeff_selected=exp_approximation(Atotal_selected,PP$P,PP$D)
FitACoeff_selected=exp_approximation(Atotal_selected,PP$P,PP$D)
###### plot heat map
Plot_FitACoeff1=ggplot(FitACoeff, aes(D,log(P)))+geom_raster(aes(fill = Slope))+
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF","#FF0000FF"))+labs(x="D mkm^2/s",title="A-type slope ")
##########################################################################
##########################################################################
# ATotal
temp = list.files(path=pathFiles,"*__Atype_profile.txt")
ATotal<- do.call(cbind,lapply(temp,function(fn)read.table(fn,header=FALSE, sep="\t")[,1]))
ATotal=as.data.frame(ATotal)
Ndim=nrow(ATotal)
Ncol=ncol(ATotal)
ATotal=cbind(c(1:Ndim),ATotal)
colnames(ATotal)[1] = "index"
ATotal$index=ATotal$index*dt[1]*Nfreq[1]
colnames(ATotal)[2:c(Ncol+1)]=ColumsNames
png("ATotal.png",width=900, height=700,res=200)
AplotTotal=ggplot(data =melt(ATotal, id = "index"),aes(x = index, y = log(value), color = variable)) +geom_line()+ggtitle("log(Atotal) Vs Time") + xlab("Time s") + ylab("log(Atotal")+theme_bw()+
theme(legend.position="bottom")
print(AplotTotal)
dev.off()
Atotal_selected=ATotal[,c(1,Nselected)]
APlot_total_selected=ggplot(data = melt(Atotal_selected, id = "index") ,aes(x = index, y = log(value), color = variable)) +geom_line()+ggtitle("log(Atotal) Vs Time") + xlab("Time s") + ylab("log(Atotal")+theme_bw()+
theme(legend.position="bottom")
print(APlot_total_selected)
