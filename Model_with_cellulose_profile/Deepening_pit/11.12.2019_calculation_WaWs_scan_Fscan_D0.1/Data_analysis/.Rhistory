geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
geom_abline(intercept = -W[1,2]/W[3,2], slope = -W[2,2]/W[3,2])+
geom_abline(intercept = -W[1,3]/W[3,3], slope = -W[2,3]/W[3,3])
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
geom_abline(intercept = -W[1,2]/W[3,2], slope = -W[2,2]/W[3,2])+
geom_abline(intercept = -W[1,3]/W[3,3], slope = -W[2,3]/W[3,3])
View(W)
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[1,3], slope = -W[1,2]/W[1,3])+
geom_abline(intercept = -W[2,1]/W[2,3], slope = -W[2,2]/W[2,3])+
geom_abline(intercept = -W[3,1]/W[3,3], slope = -W[3,2]/W[3,3])
# Training set
iris2<-iris[sample(nrow(iris)),]
Train=iris2[1:50,]
Ones=matrix(data=1,nrow=dim(Train)[1],ncol=1)
Train=cbind(Ones,Train)
T=matrix(data=0,nrow=dim(Train)[1],ncol=3)
Setosa=which(Train=="setosa",arr.ind = TRUE)
Versicolor=which(Train=="versicolor",arr.ind = TRUE)
Virginica=which(Train=="virginica",arr.ind = TRUE)
T[Setosa[,1],1]=1
T[Versicolor[,1],2]=1
T[Virginica[,1],3]=1
library(Matrix)
require(MASS)
X=as.matrix(Train[,1:4])
W=ginv((t(X)%*%X))%*%t(X)%*%T
W=ginv((t(X)%*%X))%*%t(X)%*%T
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
geom_abline(intercept = -W[1,2]/W[3,2], slope = -W[2,2]/W[3,2])+
geom_abline(intercept = -W[1,3]/W[3,3], slope = -W[2,3]/W[3,3])
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])
-W[1,1]/W[3,1]
-W[2,1]/W[3,1]
View(W)
#########################################################################
iris2<-iris[sample(nrow(iris)),]
Train=iris2[1:50,]
Ones=matrix(data=1,nrow=dim(Train)[1],ncol=1)
Train=cbind(Ones,Train)
T=matrix(data=0,nrow=dim(Train)[1],ncol=3)
Setosa=which(Train=="setosa",arr.ind = TRUE)
Versicolor=which(Train=="versicolor",arr.ind = TRUE)
Virginica=which(Train=="virginica",arr.ind = TRUE)
T[Setosa[,1],1]=1
T[Versicolor[,1],2]=1
T[Virginica[,1],3]=1
library(Matrix)
require(MASS)
X=as.matrix(cbind(Train$Ones,Train$Sepal.Length,Train$Petal.Length))
W=ginv((t(X)%*%X))%*%t(X)%*%T
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])
require(MASS)
X=as.matrix(cbind(Train$Ones,Train$Sepal.Length,Train$Petal.Length))
W=ginv((t(X)%*%X))%*%t(X)%*%T
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
geom_abline(intercept = -W[1,2]/W[3,2], slope = -W[2,2]/W[3,2])+
geom_abline(intercept = -W[1,3]/W[3,3], slope = -W[2,3]/W[3,3])
View(W)
library(Matrix)
require(MASS)
X=as.matrix(cbind(Train$Ones,Train$Sepal.Length,Train$Petal.Length))
W=ginv((t(X)%*%X))%*%t(X)%*%T
ggplot(iris, aes(x = Sepal.Length, y =Petal.Length , colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
geom_abline(intercept = -W[1,2]/W[3,2], slope = -W[2,2]/W[3,2])+
geom_abline(intercept = -W[1,3]/W[3,3], slope = -W[2,3]/W[3,3])
ggplot(iris, aes(x = Sepal.Length,y =Petal.Length,colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
geom_abline(intercept = -W[1,2]/W[3,2], slope = -W[2,2]/W[3,2])+
geom_abline(intercept = -W[1,3]/W[3,3], slope = -W[2,3]/W[3,3])
data(iris)
x <- iris[,1:4]
y <- iris[,5]
pairs(iris[1:4], main = "Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
View(`T`)
View(iris)
library('ggplot2')
ggplot(iris, aes(x = Petal.Length, y = Sepal.Length, colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')
#########################################################################
iris2<-iris[sample(nrow(iris)),]
Train=iris2[1:50,]
Ones=matrix(data=1,nrow=dim(Train)[1],ncol=1)
Train=cbind(Ones,Train)
T=matrix(data=0,nrow=dim(Train)[1],ncol=3)
Setosa=which(Train=="setosa",arr.ind = TRUE)
Versicolor=which(Train=="versicolor",arr.ind = TRUE)
Virginica=which(Train=="virginica",arr.ind = TRUE)
T[Setosa[,1],1]=1
T[Versicolor[,1],2]=1
T[Virginica[,1],3]=1
View(`T`)
library(Matrix)
require(MASS)
X=as.matrix(cbind(Train$Ones,Train$Sepal.Length,Train$Petal.Length))
W=ginv((t(X)%*%X))%*%t(X)%*%T
View(W)
ggplot(iris, aes(x = Sepal.Length,y =Petal.Length,colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
geom_abline(intercept = -W[1,2]/W[3,2], slope = -W[2,2]/W[3,2])+
geom_abline(intercept = -W[1,3]/W[3,3], slope = -W[2,3]/W[3,3])
Y=t(W)%*%X
Y=t(W)%*%X
X
W
Y=W%*%X
Y=W%*%t(X)
View(Y)
Y=t(W)%*%X
Y=t(W)%*%t(X)
View(Y)
Y=sum(t(W)%*%t(X),1)
ggplot(iris, aes(x = Sepal.Length,y =Petal.Length,colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
#geom_abline(intercept = -W[1,2]/W[3,2], slope = -W[2,2]/W[3,2])+
#geom_abline(intercept = -W[1,3]/W[3,3], slope = -W[2,3]/W[3,3])
Y=W%*%t(X)
ggplot(iris, aes(x = Sepal.Length,y =Petal.Length,colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])+
#geom_abline(intercept = -W[1,2]/W[3,2], slope = -W[2,2]/W[3,2])+
#geom_abline(intercept = -W[1,3]/W[3,3], slope = -W[2,3]/W[3,3])
Y=W%*%t(X)
ggplot(iris, aes(x = Sepal.Length,y =Petal.Length,colour = Species)) +
geom_point() +
ggtitle('Iris Species by Petal and Sepal Length')+
geom_abline(intercept = -W[1,1]/W[3,1], slope = -W[2,1]/W[3,1])
carat
source('~/Applications/Portfolio/Carat_example.R')
tidyverse_update()
install.packages(c("broom", "cli", "dbplyr", "dplyr", "forcats", "ggplot2", "haven",
"httr", "jsonlite", "modelr", "purrr", "readr", "readxl", "reprex",
"rlang", "rstudioapi", "stringr", "tibble", "tidyr"))
install.packages(c("broom", "cli", "dbplyr", "dplyr", "forcats", "ggplot2", "haven", "httr", "jsonlite", "modelr", "purrr", "readr", "readxl", "reprex", "rlang", "rstudioapi", "stringr", "tibble", "tidyr"))
install.packages(c("broom", "cli", "dbplyr", "dplyr", "forcats", "ggplot2", "haven",
"httr", "jsonlite", "modelr", "purrr", "readr", "readxl", "reprex",
"rlang", "rstudioapi", "stringr", "tibble", "tidyr"))
library(reshape2)
library(tidyverse)
library(dplyr)
library(ggridges)
setwd("/Users/pichugina/Work/Diffusion_Absorption_model/Model_with_cellulose_profile/Deepening_pit/11.12.2019_calculation_WaWs_scan_Fscan_D0.1/Data_analysis")
source("read_parameters_files.R")
# folder with a data
folder='/Users/pichugina/Work/Diffusion_Absorption_model/Model_with_cellulose_profile/Deepening_pit/11.12.2019_calculation_WaWs_scan_Fscan_D0.1/'
# folder path for different calculation with different Wa Ws relation
Wa0.5Ws=paste(folder,'Wa0.5Ws',sep='')
# read Parameters files to select F=1 case
ParametersTable=read_parameters_files(Wa0.5Ws)
ParametersTable=subset(ParametersTable,ParametersTable$F==1)
ListFilesToRead=ParametersTable$FileName
#read end S profile
FilePath=paste(Wa0.5Ws,'/',ListFilesToRead[1],"___Stype_profile.txt",sep="")
Sprofile=as.data.frame(read.table(file=FilePath,header = F))
EndSprofile=Sprofile[,ncol(Sprofile)]
#---------------------------------------------------------------------------------------------------#
#---- Make a ridgeline plot ---------#
NumberRidges=10
timeStep=ParametersTable$timeStep[1]
ColSelection=seq(from=1,to=ncol(Sprofile),by=c(ceiling(ncol(Sprofile)/NumberRidges)))
Sridges=Sprofile[,ColSelection]
# introduce x-axis in mkm
Sridges=cbind(seq(from=3.5,to=350,by=3.5),Sridges)
colnames(Sridges)[1]="layer"
TimeLabel=(ColSelection-1)*timeStep
colnames(Sridges)[2:ncol(Sridges)]=lapply(TimeLabel,as.character)
MelterSridge=melt(Sridges,id="layer")
colnames(MelterSridge)[2]="time"
ggplot(MelterSridge, aes(x = layer, y = time, height = value)) +
geom_density_ridges(stat = "identity", scale = 1)+
ggtitle("Sprofile by time")
#-------------------------------------------------------------------------------------------------------#
##--- Time cut off find time point where concentation= 0.90 concentration at the end of interval --- ####
CutOff=0.90
library(ggridges)
#-------------------------------------------------------------------------------------------------------#
##--- Time cut off find time point where concentation= 0.90 concentration at the end of interval --- ####
CutOff=0.90
DistanceSpread=as.data.frame(matrix(0, ncol =3 , nrow = length(3:ncol(Sridges))))
colnames(DistanceSpread)=c("time","distance","aproximate")
counter=1
for (i in 3:ncol(Sridges))
{ NormToMax=Sridges[,i]/max(Sridges[,i])
Index=max(which(NormToMax<0.90))
DistanceSpread$time[counter]=TimeLabel[i-1]
DistanceSpread$distance[counter]=Sridges[Index,1]
counter=counter+1
}
# test does it fit to the diffusion x^2=A*sqrt(t)
m<-nls(distance~a*sqrt(time),data=DistanceSpread,start=list(a=0.1))
DistanceSpread$aproximate=predict(m)
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
theme_bw()
DistanceSpread
Sridges
geom_line(size=1.5)+
geom_line(size=1.5)+
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance in mkm')
theme_bw()
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme_classic()
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme_bw()
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme_bw(axis.text=element_text(size=12))
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.text=element_text(size=12))+
theme_bw()
#########################################################################################################
# Aproximate S-profile
#########################################################################################################
#  aproximate S=S0 exp(at) sin(rx+epsilon)/epsilon
#solution is very close to pi/2
#
D=0.1 #mkm^2/s
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.text=element_text(size=14))+
theme_bw()
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.text=element_text(size=20))+
theme_bw()
#########################################################################################################
# Aproximate S-profile
#########################################################################################################
#  aproximate S=S0 exp(at) sin(rx+epsilon)/epsilon
#solution is very close to pi/2
#
D=0.1 #mkm^2/s
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.text=element_text(size=20))+
#  +annotate("text", x = 4, y = 25,label = paste("time=a*sqrt(time)","a=1.592","residual sum-of-squares: 21.62",sep="\n"))
#########################################################################################################
# Aproximate S-profile
#########################################################################################################
#  aproximate S=S0 exp(at) sin(rx+epsilon)/epsilon
#solution is very close to pi/2
#
D=0.1 #mkm^2/s
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.text=element_text(size=20))
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.text=element_text(size=12))
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.title=element_text(size=12))
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.title=element_text(size=20))
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.title=element_text(size=16))
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.title=element_text(size=14))
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.title=element_text(size=14))+
theme_bw()
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.title=element_text(size=14))
e
e
library(reshape2)
library(tidyverse)
library(dplyr)
library(ggridges)
setwd("/Users/pichugina/Work/Diffusion_Absorption_model/Model_with_cellulose_profile/Deepening_pit/11.12.2019_calculation_WaWs_scan_Fscan_D0.1/Data_analysis")
source("read_parameters_files.R")
# folder with a data
folder='/Users/pichugina/Work/Diffusion_Absorption_model/Model_with_cellulose_profile/Deepening_pit/11.12.2019_calculation_WaWs_scan_Fscan_D0.1/'
# folder path for different calculation with different Wa Ws relation
Wa0.5Ws=paste(folder,'Wa0.5Ws',sep='')
# read Parameters files to select F=1 case
ParametersTable=read_parameters_files(Wa0.5Ws)
ParametersTable=subset(ParametersTable,ParametersTable$F==1)
ListFilesToRead=ParametersTable$FileName
#read end S profile
FilePath=paste(Wa0.5Ws,'/',ListFilesToRead[1],"___Stype_profile.txt",sep="")
Sprofile=as.data.frame(read.table(file=FilePath,header = F))
EndSprofile=Sprofile[,ncol(Sprofile)]
EndSprofile
#read end S profile
FilePath=paste(Wa0.5Ws,'/',ListFilesToRead[1],"___Stype_profile.txt",sep="")
Sprofile=as.data.frame(read.table(file=FilePath,header = F))
ListFilesToRead[1]
ParametersTable
#s_profile<-function(layer_intake,limit_grow)
#  aproximate S=S0 exp(at) sin(rx+epsilon)/epsilon
layer_intake=10.5
Xsize=seq(from=0,to=350,by=0.01)
Selected=which(Xsize<layer_intake)
k=P*dx
epsilon=pi/2*D/(k*layer_intake+D)
r=pi/2/layer_intake
library(reshape2)
library(tidyverse)
library(dplyr)
library(ggridges)
setwd("/Users/pichugina/Work/Diffusion_Absorption_model/Model_with_cellulose_profile/Deepening_pit/11.12.2019_calculation_WaWs_scan_Fscan_D0.1/Data_analysis")
source("read_parameters_files.R")
# folder with a data
folder='/Users/pichugina/Work/Diffusion_Absorption_model/Model_with_cellulose_profile/Deepening_pit/11.12.2019_calculation_WaWs_scan_Fscan_D0.1/'
# folder path for different calculation with different Wa Ws relation
Wa0.5Ws=paste(folder,'Wa0.5Ws',sep='')
# read Parameters files to select F=1 case
ParametersTable=read_parameters_files(Wa0.5Ws)
ParametersTable=subset(ParametersTable,ParametersTable$F==1)
ListFilesToRead=ParametersTable$FileName
#read end S profile
NumberFileSelected=1
FilePath=paste(Wa0.5Ws,'/',ListFilesToRead[NumberFileSelected],"___Stype_profile.txt",sep="")
P=ParametersTable$P[NumberFileSelected];
Sprofile=as.data.frame(read.table(file=FilePath,header = F))
EndSprofile=Sprofile[,ncol(Sprofile)]
#-------------------------------------------------------------------------------------------------------#
##--- Time cut off find time point where concentation= 0.90 concentration at the end of interval --- ####
CutOff=0.90
DistanceSpread=as.data.frame(matrix(0, ncol =3 , nrow = length(3:ncol(Sridges))))
colnames(DistanceSpread)=c("time","distance","aproximate")
counter=1
for (i in 3:ncol(Sridges))
{ NormToMax=Sridges[,i]/max(Sridges[,i])
Index=max(which(NormToMax<0.90))
DistanceSpread$time[counter]=TimeLabel[i-1]
DistanceSpread$distance[counter]=Sridges[Index,1]
counter=counter+1
}
# test does it fit to the diffusion x^2=A*sqrt(t)
m<-nls(distance~a*sqrt(time),data=DistanceSpread,start=list(a=0.1))
DistanceSpread$aproximate=predict(m)
MeltedData=melt(DistanceSpread,id="time")
ggplot(MeltedData,aes(x=time,y=value,color=variable))+
geom_line(size=1.5)+
ggtitle("Distance spread")+
ylab('distance (mkm)')+
xlab('time s')+
theme(axis.title=element_text(size=14))
D=0.1 #mkm^2/s
L=350 #mkm
Ws=3.7e-4
t=10000 #s
S0=10000
#s_profile<-function(layer_intake,limit_grow)
#  aproximate S=S0 exp(at) sin(rx+epsilon)/epsilon
layer_intake=10.5
Xsize=seq(from=0,to=350,by=0.01)
Selected=which(Xsize<layer_intake)
k=P*dx
epsilon=pi/2*D/(k*layer_intake+D)
r=pi/2/layer_intake
#S-type general growth rate equal to
a=Ws-r^2*D
Xleft=Xsize(Selected)
epsilon=pi/2*D/(k*layer_intake+D)
r=pi/2/layer_intake
#S-type general growth rate equal to
a=Ws-r^2*D
Xleft=Xsize[Selected]
S1=sin(r*Xleft+epsilon)/epsilon
epsilon=pi/2*D/(k*layer_intake+D)
k=P*dx
#s_profile<-function(layer_intake,limit_grow)
#  aproximate S=S0 exp(at) sin(rx+epsilon)/epsilon
layer_intake=10.5
dx=0.01
Xsize=seq(from=0,to=350,by=0.01)
Selected=which(Xsize<layer_intake)
k=P*dx
epsilon=pi/2*D/(k*layer_intake+D)
r=pi/2/layer_intake
#S-type general growth rate equal to
a=Ws-r^2*D
Xleft=Xsize[Selected]
S1=sin(r*Xleft+epsilon)/epsilon
S1=S1/max(S1)*limit_grow
S2=rep(limit_grow,times=c(length(Xsize)-length(Selected)))
#s_profile<-function(layer_intake,limit_grow)
#  aproximate S=S0 exp(at) sin(rx+epsilon)/epsilon
limit_grow=1000
layer_intake=10.5
dx=0.01
Xsize=seq(from=0,to=350,by=0.01)
Selected=which(Xsize<layer_intake)
k=P*dx
epsilon=pi/2*D/(k*layer_intake+D)
r=pi/2/layer_intake
#S-type general growth rate equal to
a=Ws-r^2*D
Xleft=Xsize[Selected]
S1=sin(r*Xleft+epsilon)/epsilon
S1=S1/max(S1)*limit_grow
S2=rep(limit_grow,times=c(length(Xsize)-length(Selected)))
S=rbind(S1,S2)
S=(S1,S2)
S=c(S1,S2)
qplot(Xsize,S,geom='line')
qplot(Xsize,S1,geom='line')
S1=S1/max(S1)*limit_grow
qplot(Xsize,S1,geom='line')
qplot(Xsize[Selected],S1,geom='line')
